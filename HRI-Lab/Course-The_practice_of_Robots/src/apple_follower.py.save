#!/usr/bin/env python

import rospy
import tf
import math
import numpy as np
from tf.transformations import euler_from_quaternion
from nav_msgs.msg import Odometry
from std_msgs.msg import ColorRGBA
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import PointStamped, Vector3, Point, Quaternion
from visualization_msgs.msg import Marker, MarkerArray

angle_min = 0.0
angle_max = 1.0
angle_increment = 1.0
ranges = [0, 0]
_odom_x_ = 0.0
_odom_y_ = 0.0
_odom_theta_ = 0.0

def callback(msg):
    global angle_min, angle_max, angle_increment, ranges
    angle_min = msg.angle_min
    angle_max = msg.angle_max
    angle_increment = msg.angle_increment
    ranges = msg.ranges

def callback_odom(msg):
    global _odom_x_, _odom_y_, _odom_theta_
    _odom_x_ = msg.pose.pose.position.x
    _odom_y_ = msg.pose.pose.position.y
    qx = msg.pose.pose.orientation.x
    qy = msg.pose.pose.orientation.y
    qz = msg.pose.pose.orientation.z
    qw = msg.pose.pose.orientation.w
    q = (qx, qy, qz, qw)
    e = euler_from_quaternion(q)
    _odom_theta_ = e[2]

def follower():
    rospy.Subscriber("scan", LaserScan, callback)
    rospy.Subscriber("odom", Odometry, callback_odom)

def move_to(des_x, des_y, rate):
    global _odom_x_, _odom_y_,  _odom_theta_
    dist_diff = DISTANCE_ERROR_RANGE * 2
    while not rospy.is_shutdown() and not (-DISTANCE_ERROR_RANGE <= dist_diff and dist_diff <= DISTANCE_ERROR_RANGE):
        x_diff = des_x - _odom_x_
        y_diff = des_y - _odom_y_
        dist_diff = np.sqrt((x_diff) ** 2 + (y_diff) ** 2)
        des_theta = np.arctan2(y_diff, x_diff)
        theta_diff = des_theta - _odom_theta_

#        rospy.loginfo(str(_odom_x_) + '   ' + str(_odom_y_) + '   ' + str(des_x) + '   ' + str(des_y))

        msg = Twist()
        if -THETA_ERROR_RANGE <= theta_diff and theta_diff <= THETA_ERROR_RANGE:
            msg.linear.x = 1
            rospy.loginfo('DIST: ' + str(dist_diff))
        else:
            if theta_diff < 0:
                msg.angular.z = -0.7
            else:
                msg.angular.z = 0.7
#            rospy.loginfo(str(des_theta) + '   ' + str(_odom_theta_))
        pub.publish(msg)
        rate.sleep()

    pub.publish(Twist())


def talker():
    vis = rospy.Publisher('points', MarkerArray, queue_size=1)
    pub = rospy.Publisher('closest_point', PointStamped, queue_size = 10)
    rospy.init_node('talker', anonymous=True)
    rate = rospy.Rate(10)
    while not rospy.is_shutdown():
        follower()
        rospy.loginfo(_odom_theta_)
        global angle_min, angle_max, angle_increment, ranges, _odom_x_, _odom_y_, _odom_theta_
        x = 0
        y = 0
        min_angle = 0
        min_range = 30.0
        markers = MarkerArray()
        for i in range(len(ranges)):
            theta = _odom_theta_ + angle_min + i * angle_increment
            x = _odom_x_ + ranges[i] * math.cos(theta)
            y = _odom_y_ + ranges[i] * math.sin(theta)
            if ranges[i] <= min_range:
                min_angle = theta
                min_range = ranges[i]
            m = Marker()
            m.header.frame_id = 'map'
            m.header.stamp = rospy.Time()
            m.id = i
            m.ns = 'debug_point'
            m.type = Marker.SPHERE
            m.action = Marker.MODIFY
            m.pose.position = Point( x, y, 0.5 )
            m.pose.orientation = Quaternion( 0, 0, 0, 1 )
            m.scale = Vector3( 0.1, 0.1, 1.0 )
            m.color = ColorRGBA( 0, 1, 0, 1 )
            markers.markers.append( m )
        msg = PointStamped()
        msg.header.stamp = rospy.Time()
        msg.header.frame_id = '/map'
        msg.point = Point( _odom_x_ + min_range * math.cos(min_angle), _odom_y_ + min_range * math.sin(min_angle), 0 )
        pub.publish(msg)
        vis.publish(markers)
#        rospy.loginfo(str(msg))
        rate.sleep()

if(__name__ == '__main__'):
    try:
        talker()
    except rospy.ROSInterruptException:
        pass

